AbstractDeclaration = </getName()/>
AbstractConstructor = </getDeclaringType()/>
LocalDeclaredInAlice = </getValidName()/>

ExpressionStatement = </expression/>
BlockStatement = </statements/>
WhileLoop = while </conditional/> is true\n\t</body/>\n\t loop
ForEachInArrayLoop = for each </__variable__/> in </array/>\n\t</body/>\n\t loop
CountLoop = count up to </count/>\n\t</body/>\n\t loop
BooleanExpressionBodyPair = if </expression/> is true then\n\t</body/>
ConditionalStatement = </booleanExpressionBodyPairs/>\nelse\n\t</elseBody/>
DoTogether = do together\n\t</body/>
DoInOrder = do in order\n\t</body/>
VariableDeclarationStatement = initialize </__variable__/> </_gets_toward_leading_/> </initializer/>
ConstantDeclarationStatement = permanently set </__constant__/> </_gets_toward_leading_/> </initializer/>
Comment = // </text/>
EachInArrayTogether = each </__variable__/> in </array/> together\n\t</body/>
ReturnStatement = return </expression/>

AbstractValueLiteral = </value/>
NullLiteral = <unset>
ThisExpression = this
TypeExpression = 
MethodInvocation = </expression/> </method/> </arguments/>
FieldAccess = </expression/>.</field/>
VariableAccess = </variable/>
ConstantAccess = </constant/>
ParameterAccess = </parameter/>
ArrayAccess = </array/>[ </index/> ]
ArrayLength = </array/>.length
AssignmentExpression = </leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
InfixExpression = </leftOperand/> </operator/> </rightOperand/>
LogicalComplement = NOT </operand/>
InstanceCreation = new instance of </constructor/> </arguments/>
ArrayInstanceCreation = new </arrayType/> { </expressions/> }
StringConcatenation = </leftOperand/> + </rightOperand/>

Argument = </getParameterNameText()/></expression/>

