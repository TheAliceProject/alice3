<!-- Copyright 2000 Dj Walker-Morgan -->


<project name="jython" default="developer-build" basedir=".">


    <!-- print out some usage hints -->
    <target name="usage" description="prints a short usage">
        <echo>
Use case 1: developer build (in your local jython copy)
-------------------------------------------------------
  - call target 'developer-build' (which is the default for this build.xml)
This build will create directories /build and /dist below basedir.


Use case 2: full build for a release (using svn checkout)
---------------------------------------------------------
  - make sure you have access to the jython subversion repository (https://jython.svn.sourceforge.net/svnroot/jython/trunk)
  - override svn.main.dir in ant.properties (if necessary)
  - call target 'full-build'
This build will create a working directory named full_build/${svn.main.dir} at the same
level as your local directories jython, sandbox and installer.
It will contain a big jython_installer-${jython.version}.jar file suitable for installation.

Please be aware:
To build older releases, it may be necessary to use an older build.xml, too (with the corresponding tag).
For example it is not possible to build Release_2_2alpha1 with this version of build.xml.


Use case 3: build only the parser (grammar)
-------------------------------------------
  - override javaccHome in ant.properties (if necessary)
  - call target 'parser'
or:
  - set javaccHome, either on the command line, or inside parser/build.xml
  - call parser/build.xml (default target)
This build will only create files inside org/python/parser.


Note on targets
---------------
The following targets are designed for direct invocation:
  - usage
  - developer-build
  - full-build
  - clean (uses developer-build settings if called directly)
  - parser (uses developer-build settings if called directly)
Following an ant convention, the callable targets have a description attribute.
All other targets may give unpredicted results if called directly.


Where ant.properties are searched
---------------------------------
  1. in user.home
  2. in the same directory as this build.xml file
The first setting of a property wins, further settings are ignored.


Actions for a release
---------------------
  1. determine the new svn tag to be applied to jython
  2. check the svn:externals property of project jython for an appropriate cpython maintenance branch
  3. change the following properties in this build.xml, if necessary:
       - svn.main.dir        (target: full-init)
       - jython.version      (target: full-init)
       - jdk.target.version  (target: pre-init)
  4. if new CPython .py files should be distributed, add them to build.Lib.include.properties
  5. adjust the public static String version in PySystemState.java
  6. adjust the version strings in target 'version' of this build.xml
       (this is for upcoming snapshot builds only)
  7. adjust the url for the cpython maintenance branch in target 'checkout' of this build.xml
  8. check in all the changes
  9. apply the new tag to the jython svn (all projects)
 10. call target 'full-build'



An example ant.properties file:
-------------------------------

# - define the home for javacc (only used for parser grammar)
javaccHome=${basedir}/../externals/javacc-3.2

# - ht2html tool for the doc target (only needed for full-build)
ht2html.dir=${basedir}/../externals/ht2html-2.0

# - define the home of the corresponding CPython version
python.home=/Users/groves/dev/src/Python-2.2.3

# - javax.servlet
servlet.jar=c:/workspace/HEAD/CH.obj.commons.core/make_lib/j2ee.jar

# - org.gnu.readline
readline.jar=${basedir}/../externals/external-jars/readline.jar
# - jline
jline.jar=${basedir}/../externals/external-jars/jline-0.9.91.jar


# - zxJDBC
# (for mysql, see www.mysql.com/downloads/api-jdbc-stable.html)
# (for postgres, see http://jdbc.postgresql.org/)
mysql.jar=${basedir}/../externals/external-jars/mysql-connector-java-3.0.16-ga-bin.jar
postgresql.jar=${basedir}/../externals/external-jars/pg74.215.jdbc2.jar
oracle.jar=C:/workspace/HEAD/for_development/bisdevsrv28/jboss/server/infra/lib/ojdbc14.jar
#informix.jar=

# - option for javac (build.compiler=modern is a global option to use standard jdk 1.3/1.4/1.5)
#build.compiler=modern
#jdk.target.version=1.4
#debug=false
#optimize=off
#deprecation=off

# - the svn main directory to build from; only needed for full-build
# This e.g. could be one of:
#   trunk
#   branches/Release_2_2maint
#   tags/Release_2_2rc3
# meaning any directory just above the two directories:
#   /installer
#   /jython
# svn.main.dir defaults to branches/Release_2_2maint
#svn.main.dir=branches/Release_2_2maint

# - the revision; only needed for a snapshot full-build
# To create a snapshot build: uncomment and indicate the correct revision (it has to be a number)
# For 'normal' builds, this defaults to the latest revision on svn.main.dir (HEAD)
#svn.revision=3444

# - the directory containing libsvnjavahl-1.dll (on windows) and svnjavahl.jar; only needed for full-build
# how to get these:
#   - download http://subversion.tigris.org/files/documents/15/31073/svn-win32-1.3.1_javahl.zip (or newer)
#   - unzip the .dll and .jar into javahl.dir
javahl.dir=C:/Programme/Subversion/javahl

# - the directory containing the svnant related .jar files; only needed for full-build
# the following .jar files (probably) are needed:
#   - commons-lang-2.0.jar
#   - jakarta-regexp-1.3.jar
#   - svnant.jar
#   - svnClientAdapter.jar
#   - svnjavahl.jar
# how to get these:
#   - download http://subclipse.tigris.org/files/documents/906/23927/svnant-1.0.0-rc1.zip (or newer)
#   - unzip the jar files from /lib folder to svnant.jar.dir
svnant.jar.dir=${basedir}/../externals/svnant-jars
        </echo>
    </target>


    <!-- developer build -->
    <target name="developer-build"
            depends="developer-build-called, developer-init, post-init, template, copy-dist"
            description="a local build for developers"
    />


    <!-- full build -->
    <target name="full-build" depends="full-init, post-init, install" description="a full build from svn" />


    <!-- set a property to indicate that target 'developer-build' was really called -->
    <target name="developer-build-called">
        <property name="developer-build-called" value="true" />
    </target>


    <!-- initialize properties common to both developer build and full build -->
    <target name="pre-init">
        <!-- load from .properties file -->
        <echo>loading properties from ${user.home}/ant.properties</echo>
        <property file="${user.home}/ant.properties" />
        <echo>loading properties from ${basedir}/ant.properties</echo>
        <property file="${basedir}/ant.properties" />

        <property name="build.compiler" value="modern" />
        <property name="jdk.target.version" value="1.4" />
        <property name="jdk.source.version" value="1.4" />
        <property name="deprecation" value="off" />
        <property name="debug" value="off" />
        <property name="optimize" value="on" />
        <property name="nowarn" value="false" />

        <!-- classpaths -->
        <path id="main.classpath">
            <pathelement path="${readline.jar}" />
            <pathelement path="${jline.jar}" />
            <pathelement path="${servlet.jar}" />
            <pathelement path="${informix.jar}" />
            <pathelement path="${oracle.jar}" />
            <pathelement path="${mysql.jar}" />
            <pathelement path="${postgresql.jar}" />
            <pathelement path="${jndi.jar}" />
            <pathelement path="${jdbc.jar}" />
            <pathelement path="${java.class.path}" />
        </path>

        <available property="threadlocal.present" classname="java.lang.ThreadLocal" />
        <available property="secureclassloader.present" classname="java.security.SecureClassLoader" />
        <available property="servlet.present" classname="javax.servlet.Servlet" classpath="${servlet.jar}" />
        <available property="readline.present" classname="org.gnu.readline.Readline" classpath="${readline.jar}" />
        <available property="jline.present" classname="jline.Terminal" classpath="${jline.jar}" />
        <available property="informix.present" classname="com.informix.jdbc.IfxDriver" classpath="${informix.jar}" />
        <available property="mysql.present" classname="org.gjt.mm.mysql.Driver" classpath="${mysql.jar}" />
        <available property="postgresql.present" classname="org.postgresql.Driver" classpath="${postgresql.jar}" />
        <available property="oracle.present" classname="oracle.jdbc.driver.OracleDriver" classpath="${oracle.jar}" />
        <available property="jndi.present" classname="javax.naming.Context" classpath="${jndi.jar}" />
        <available property="javax.sql.present" classname="javax.sql.DataSource" />
        <available property="jdbc30.present" classname="java.sql.ParameterMetaData" />
    </target>


    <!-- init properties for the developer build -->
    <target name="developer-init" depends="pre-init">
        <property name="work.dir" value="${basedir}" />
        <property name="jython.base.dir" value="${basedir}" />
        <property name="source.dir" value="${basedir}/src" />
        <property name="templates.dir" value="${basedir}/src/templates" />
        <property name="python.lib" value="${basedir}/CPythonLib" />
        <property name="bugtests.dir" value="${basedir}/bugtests" />
        <property name="templates.lazy" value="true" />
    </target>


    <!-- init properties for the full build -->
    <target name="full-init" depends="pre-init">
        <!-- use this property to distinguish a full-build from a developer-build -->
        <property name="full-build" value="true" />
        <property name="do.templates" value="true" />

        <!-- predefined main directory for checkout -->
        <property name="svn.main.dir" value="branches/Release_2_2maint" />

        <property name="work.dir" value="${basedir}/../full_build/${svn.main.dir}" />
        <property name="svn.checkout.dir" value="${work.dir}/checkout" />
        <property name="jython.base.dir" value="${svn.checkout.dir}/jython" />
        <property name="source.dir" value="${jython.base.dir}/src" />
        <property name="has.repositories.connection" value="true" />
        <property name="python.lib" value="${jython.base.dir}/CPythonLib" />
        <property name="python.exe" value="${python.home}/python" />
        <condition property="do.checkout" value="true">
            <istrue value="${has.repositories.connection}" />
        </condition>
        <condition property="do.snapshot.build">
            <isset property="svn.revision" />
        </condition>
        <condition property="jython.version" value="${svn.revision}">
            <isset property="svn.revision" />
        </condition>
        <property name="jython.version" value="2.2.1" />
    	<!-- if not set so far, default svn.revision to HEAD, since we always want
    	     the latest revision on the specified subversion main directory -->
    	<property name="svn.revision" value="HEAD"/>
    	
        <!-- classpath for svn ant task -->
        <path id="svn.classpath">
            <pathelement path="${java.class.path}" />
            <fileset dir="${svnant.jar.dir}">
              <include name="*.jar"/>
            </fileset>
        </path>
    	<!-- taskdef for svn ant task -->
    	<taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="svn.classpath" />
    	<!-- Require all of the optional jars for a full build -->
        <fail unless="readline.present" message="readline jar not present" />
        <fail unless="jline.present" message="jline jar not present" />
        <fail unless="servlet.present" message="servlet jar not present" />
        <fail unless="informix.present" message="informix jar not present" />
        <fail unless="mysql.present" message="mysql jar not present" />
        <fail unless="postgresql.present" message="postgres jar not present" />
        <fail unless="oracle.present" message="oracle jar not present" />
    </target>


    <target name="post-init">
        <property name="output.dir" value="${work.dir}/build" />
        <property name="dist.dir" value="${work.dir}/dist" />
        <property name="apidoc.dir" value="${dist.dir}/Doc/javadoc" />
        <property name="parser.dir" value="${source.dir}/org/python/parser" />
        <echo>.</echo>
        <echo>Build environment for ${ant.project.name}</echo>
        <echo>(Note: if ${propertyname} is displayed, then the property is not set)</echo>
        <echo>--- optional libraries ---</echo>
        <echo>threadlocal        = '${threadlocal.present}'</echo>
        <echo>secureclassloader  = '${secureclassloader.present}'</echo>
        <echo>servlet            = '${servlet.present}'</echo>
        <echo>readline           = '${readline.present}'</echo>
        <echo>jline              = '${jline.present}'</echo>
        <echo>oracle             = '${oracle.present}'</echo>
        <echo>informix           = '${informix.present}'</echo>
        <echo>mysql              = '${mysql.present}'</echo>
        <echo>postgresql         = '${postgresql.present}'</echo>
        <echo>jndi               = '${jndi.present}'</echo>
        <echo>jdbc               = '${javax.sql.present}'</echo>
        <echo>jdbc3.0            = '${jdbc30.present}'</echo>
        <echo>--- properties ---</echo>
        <echo>work.dir           = '${work.dir}'</echo>
        <echo>jython.base.dir    = '${jython.base.dir}'</echo>
        <echo>source.dir         = '${source.dir}'</echo>
        <echo>parser.dir         = '${parser.dir}'</echo>
        <echo>output.dir         = '${output.dir}'</echo>
        <echo>dist.dir           = '${dist.dir}'</echo>
        <echo>apidoc.dir         = '${apidoc.dir}'</echo>
        <echo>python.lib         = '${python.lib}'</echo>
        <echo>javaccHome         = '${javaccHome}'</echo>
        <echo>ht2html.dir        = '${ht2html.dir}'</echo>
        <echo>build.compiler     = '${build.compiler}'</echo>
        <echo>jdk.target.version = '${jdk.target.version}'</echo>
        <echo>jdk.source.version = '${jdk.source.version}'</echo>
        <echo>deprecation        = '${deprecation}'</echo>
        <echo>debug              = '${debug}'</echo>
        <echo>optimize           = '${optimize}'</echo>
        <echo>nowarn             = '${nowarn}'</echo>
        <echo>--- properties (used for full-build only ) ---</echo>
        <echo>python.exe         = '${python.exe}'</echo>
        <echo>svn.main.dir       = '${svn.main.dir}'</echo>
    	<echo>svn.revision       = '${svn.revision}'</echo>
        <echo>svn.checkout.dir   = '${svn.checkout.dir}'</echo>
    	<echo>javahl.dir         = '${javahl.dir}'</echo>
    	<echo>svnant.jar.dir     = '${svnant.jar.dir}'</echo>
        <echo>do.snapshot.build  = '${do.snapshot.build}'</echo>
        <echo>do.checkout        = '${do.checkout}'</echo>
        <echo>do.templates       = '${do.templates}'</echo>
    </target>


    <!-- delete what's necessary. should correspond to the directories created in prepare  -->
    <!-- if called directly, we use settings as in developer-build -->
    <!-- (at the moment all properties will already be set if we do a full build) -->
    <target name="clean"
            depends="developer-init, post-init, clean-checkout-dir"
            unless="developer-build-called"
            description="clean up build working directories"
    >
        <!-- do not hard delete ${work.dir}, since it could be ${basedir} -->
        <!-- deletes all files and subdirectories of ${output.dir}, without ${output.dir} itself. -->
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${output.dir}" includes="**/*" />
        </delete>
        <!-- deletes all files and subdirectories of ${dist.dir}, without ${dist.dir} itself. -->
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${dist.dir}" includes="**/*" />
        </delete>
        <!-- delete the installation .jar file from ${work.dir}, but no other files -->
        <delete failonerror="false">
            <fileset dir="${work.dir}" includes="jython*.jar" />
        </delete>
    </target>


    <!-- clean svn.checkout.dir if we really checkout -->
    <target name="clean-checkout-dir" if="do.checkout">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${svn.checkout.dir}" includes="**/*" defaultexcludes="no" />
        </delete>
    </target>


    <!-- create necessary directories -->
    <target name="prepare" depends="prepare-full, prepare-checkout">
        <mkdir dir="${output.dir}" />
        <mkdir dir="${dist.dir}" />
    </target>


    <!-- create directories needed only in full-build -->
    <target name="prepare-full" depends="clean" if="full-build">
        <mkdir dir="${work.dir}" />
        <mkdir dir="${dist.dir}/Doc" />
        <mkdir dir="${apidoc.dir}" />
    </target>


    <!-- create checkout directory if necessary -->
    <target name="prepare-checkout" if="do.checkout">
        <mkdir dir="${svn.checkout.dir}" />
    </target>


    <!-- checkout if so defined -->
    <target name="checkout" depends="prepare" if="do.checkout">
        <svn javahl="${javahl.dir}" >
        	<checkout url="https://jython.svn.sourceforge.net/svnroot/jython/${svn.main.dir}/jython" revision="${svn.revision}" destPath="${svn.checkout.dir}/jython" />
        	<checkout url="https://jython.svn.sourceforge.net/svnroot/jython/${svn.main.dir}/installer" revision="${svn.revision}" destPath="${svn.checkout.dir}/installer" />
        </svn> 

        <!-- checkout cpython license from the correct python maintenance branch -->
        <svn javahl="${javahl.dir}" >
               <checkout url="http://svn.python.org/projects/python/branches/release22-maint/" destPath="${svn.checkout.dir}/python" recurse="false" />
        </svn> 
    </target>

	
	<!-- change the version string, if so defined: used for snapshot builds -->
	<!-- the following replacements have to be updated if the version strings
	     in PySystemState.java and README.txt change -->
	<target name="version" depends="checkout" if="do.snapshot.build" >
		<property name="replace.value.version" value='version = "2.2rc${svn.revision}"' />
		<replace file="${source.dir}/org/python/core/PySystemState.java" token='version = "2.2.1"' value="${replace.value.version}" />
		<replace file="${source.dir}/org/python/core/PySystemState.java" token="PY_RELEASE_LEVEL = 0x0F" value="PY_RELEASE_LEVEL = 0xAA" />
		<property name="replace.value.serial" value="PY_RELEASE_SERIAL = ${svn.revision}" />
		<replace file="${source.dir}/org/python/core/PySystemState.java" token="PY_RELEASE_SERIAL = 0" value="${replace.value.serial}" />

    	<!-- change README.txt -->
		<replace file="${jython.base.dir}/README.txt" token='2.2.1' value='2.2rc${svn.revision}' />
		<replace file="${jython.base.dir}/README.txt">
			<replacetoken>=======================</replacetoken>
			<replacevalue>--------------------------

This is a snapshot build.
It reflects the current development status.
				
The readme text for the next release will be like:

			</replacevalue>
		</replace>
	</target>

    <!-- separate build.xml for parser grammar -->
    <!-- we use settings as in developer-build - at the moment all properties will already be set if we do a full build -->
    <target name="parser" depends="developer-init, post-init, prepare" if="javaccHome" description="the grammar build">
        <echo>processing ${parser.dir}/build.xml</echo>
        <ant dir="${parser.dir}" />
    </target>


    <!-- prepare template ant task -->
    <target name="template-init" depends="prepare" if="do.templates">
      
        <javac srcdir="${source.dir}/"
                destdir="${output.dir}/"
                target="${jdk.target.version}"
                source="${jdk.source.version}"
                debug="${debug}"
                optimize="${optimize}"
                deprecation="${deprecation}"
                nowarn="${nowarn}"
        >
            <include name="org/python/util/TemplateAntTask.java" />
        </javac>
    </target>


    <!-- run templates -->
    <target name="template" depends="checkout, template-init" if="do.templates">
        <taskdef name="gentempl" classname="org.python.util.TemplateAntTask"
            classpath="${output.dir}" />
        <gentempl srcdir="${templates.dir}" verbose="true"
		  lazy="${templates.lazy}"/>
    </target>


    <!-- compile java sources -->
    <target name="compile" depends="version, parser">
        <javac srcdir="${source.dir}/"
               destdir="${output.dir}/"
               target="${jdk.target.version}"
               source="${jdk.source.version}"
               debug="${debug}"
               optimize="${optimize}"
               deprecation="${deprecation}"
               nowarn="${nowarn}"
        >
            <exclude name="org/python/parser/python.java" />
            <exclude name="**/PyServlet.java" unless="servlet.present" />
            <exclude name="**/ReadlineConsole.java" unless="readline.present" />
            <exclude name="**/JLineConsole.java" unless="jline.present" />
            <exclude name="**/handler/InformixDataHandler.java" unless="informix.present" />
            <exclude name="**/handler/MySQLDataHandler.java" unless="mysql.present" />
            <exclude name="**/handler/OracleDataHandler.java" unless="oracle.present" />
            <exclude name="**/handler/PostgresqlDataHandler.java" unless="postgresql.present" />
            <exclude name="**/connect/Lookup.java" unless="jndi.present" />
            <exclude name="**/connect/Lookup.java" unless="javax.sql.present" />
            <exclude name="**/connect/Connectx.java" unless="javax.sql.present" />
            <exclude name="**/JDBC30DataHandler.java" unless="jdbc30.present" />
            <classpath refid="main.classpath" />
        </javac>

        <javac srcdir="${jython.base.dir}/Lib"
               includes="jxxload_help/**"
               destdir="${output.dir}/"
               target="${jdk.target.version}"
               source="${jdk.source.version}"
               debug="${debug}"
               optimize="${optimize}"
               deprecation="${deprecation}"
               nowarn="${nowarn}"
        />

        <!-- java files used by tests -->
        <javac srcdir="${jython.base.dir}/Lib/test/"
               includes="javatests/**"
               destdir="${output.dir}/"
               target="${jdk.target.version}"
               source="${jdk.source.version}"
               debug="${debug}"
               optimize="${optimize}"
               deprecation="${deprecation}"
               nowarn="${nowarn}"
        />

        <copy file="${source.dir}/org/python/modules/ucnhash.dat"
              todir="${output.dir}/org/python/modules"
              preservelastmodified="true"
        />

        <copy todir="${output.dir}/com" preservelastmodified="true">
            <fileset dir="${source.dir}/com">
                <include name="**/*.properties" />
            </fileset>
        </copy>
    </target>


    <!-- build jython.jar -->
    <target name="jar" depends="compile">
        <jar destfile="${dist.dir}/jython.jar"
             basedir="${output.dir}"
             update="true">
          <include name="com/**/*" />
          <include name="org/**/*" />
          <include name="jxxload_help/*" />
          <include name="javatests/*" />
          <manifest>
              <attribute name="Main-Class" value="org.python.util.jython" />
              <attribute name="Built-By" value="${user.name}" />
              <!-- info section. ATTN: no blanks, no '.' in the names -->
              <section name="Build-Info">
                  <attribute name="version" value="${jython.version}" />
                  <attribute name="svn-build" value="${do.checkout}" />
                  <attribute name="threadlocal" value="${threadlocal.present}" />
                  <attribute name="secureclassloader" value="${secureclassloader.present}" />
                  <attribute name="servlet" value="${servlet.present}" />
                  <attribute name="readline" value="${readline.present}" />
                  <attribute name="jline" value="${jline.present}" />
                  <attribute name="oracle" value="${oracle.present}" />
                  <attribute name="informix" value="${informix.present}" />
                  <attribute name="mysql" value="${mysql.present}" />
                  <attribute name="postgresql" value="${postgresql.present}" />
                  <attribute name="jndi" value="${jndi.present}" />
                  <attribute name="jdbc" value="${javax.sql.present}" />
                  <attribute name="jdbc3_0" value="${jdbc30.present}" />
                  <attribute name="build-compiler" value="${build.compiler}" />
                  <attribute name="jdk-target-version" value="${jdk.target.version}" />
                  <attribute name="debug" value="${debug}" />
                  <attribute name="optimize" value="${optimize}" />
              </section>
          </manifest>
        </jar>
    </target>


    <!-- build the .html files using the ht2html tool -->
    <target name="doc" depends="compile" if="full-build">
        <fail unless="ht2html.dir" message="ht2html.dir is not set" />
        <copy todir="${dist.dir}/Doc" preservelastmodified="true">
            <fileset dir="Doc" includes="*.ht, **/*.gif" />
        </copy>
        <!-- Create .html files in Doc -->
        <apply executable="${python.exe}" dir="Doc">
            <env key="PYTHONPATH" path="${jython.base.dir}/Misc/htgen" />
            <arg line="${ht2html.dir}/ht2html.py" />
            <arg line="-s JyLocalGenerator" />
            <fileset dir="${dist.dir}/Doc">
                <include name="*.ht" />
            </fileset>
        </apply>
        <delete>
            <fileset dir="${dist.dir}/Doc" includes="*.ht" />
        </delete>
    </target>


    <!-- javadoc -->
    <target name="javadoc" depends="compile" if="full-build">
        <javadoc sourcepath="${source.dir}"
                 destdir="${apidoc.dir}"
                 source="${jdk.source.version}"
                 public="true"
                 breakiterator="yes"
                 packagenames="org.python.core, org.python.util, com.ziclix.python.sql"
                 windowtitle="Jython API documentation"
                 bottom="&lt;a href='http://www.jython.org' target='_top'>Jython homepage&lt;/a>"
        >
            <classpath refid="main.classpath" />
        </javadoc>
    </target>


    <!-- copy for full distribution -->
    <target name="copy-full" if="full-build">
        <!-- Misc files -->
        <echo>copy misc files from ${jython.base.dir}</echo>
        <copy todir="${dist.dir}" preservelastmodified="true">
            <fileset dir="${jython.base.dir}"
                     includes="ACKNOWLEDGMENTS, build.xml, build.Lib.include.properties, NEWS, LICENSE.txt, README.txt, registry"
            />
        </copy>

        <!-- copy the CPython license -->
        <echo>copy CPython LICENSE from ${svn.checkout.dir}/python</echo>
        <copy file="${svn.checkout.dir}/python/LICENSE" tofile="${dist.dir}/LICENSE_CPython.txt" preservelastmodified="true" />

        <!-- sources: todir has to correspond with installer/**/JarInstaller.java -->
        <echo>copy sources from ${jython.base.dir}</echo>
        <copy todir="${dist.dir}/src/java" preservelastmodified="true">
            <fileset dir="${jython.base.dir}">
              <include name="src/**/*.java" />
              <include name="src/com/**/*.properties" />
              <include name="Lib/jxxload_help/*.java" />
              <include name="Lib/test/javatests/*.java" />
              <include name="src/org/**/ucnhash.dat" />
              <include name="src/org/python/parser/build.xml" />
              <exclude name="src/org/python/parser/python.java" />
            </fileset>
        </copy>

        <!-- The demo files -->
        <echo>copy the demo files from ${jython.base.dir}/Demo</echo>
        <copy todir="${dist.dir}/Demo" preservelastmodified="true">
            <fileset dir="${jython.base.dir}/Demo">
              <include name="**/*.java" />
              <include name="**/*.html" />
              <include name="**/*.py" />
              <include name="**/*.txt" />
              <include name="**/*.xml**" />
              <include name="**/jreload/example.jar" />
              <include name="**/jreload/_xample/Version.class" />
              <exclude name="**/jpywork/**" />
            </fileset>
        </copy>
    </target>


    <!-- copy for distribution -->
    <target name="copy-dist" depends="jar, doc, javadoc, copy-full">
        <!-- Tools: jythonc and freeze -->
        <echo>copy Tools from ${jython.base.dir}/Tools</echo>
        <copy todir="${dist.dir}" preservelastmodified="true">
            <fileset dir="${jython.base.dir}" includes="Tools/**/*.py" />
        </copy>

        <!-- Copy the CPython standard library files -->
        <echo>copy CPython/Lib *.py files from ${python.lib}</echo>
        <copy todir="${dist.dir}/Lib" preservelastmodified="true">
            <fileset dir="${python.lib}" excludes="**/*.pyc, **/*.pyo">
                <patternset>
                    <includesfile name="${jython.base.dir}/build.Lib.include.properties" />
                    <exclude name="test/output/test_sax"/>
                    <exclude name="test/output/test_socket"/>
                    <exclude name="test/output/test_zlib"/>
                </patternset>
            </fileset>
        </copy>

        <!-- The jython .py modules: important to overwrite the above CPython .py files -->
        <echo>copy the jython *.py modules from ${jython.base.dir}/Lib</echo>
        <copy todir="${dist.dir}/Lib" preservelastmodified="true" overwrite="true">
            <fileset dir="${jython.base.dir}/Lib" excludes="**/*.class"/>
        </copy>
    </target>


    <!-- wrap the build into the installer -->
    <target name="install" depends="copy-dist">
        <property name="install.src.dir" value="${jython.base.dir}/../installer/src/java" />
        <echo>compiling installer from ${install.src.dir}</echo>
        <javac srcdir="${install.src.dir}"
               includes="org/**"
               destdir="${output.dir}/"
               target="${jdk.target.version}"
               source="${jdk.source.version}"
               debug="${debug}"
               optimize="${optimize}"
               deprecation="${deprecation}"
               nowarn="${nowarn}"
        />
        <echo>copy installer classes to ${dist.dir}</echo>
        <copy todir="${dist.dir}" preservelastmodified="true">
            <fileset dir="${output.dir}">
            	<include name="org/python/util/install/**/*.class" />
            	<include name="org/apache/commons/cli/*.class" />
            </fileset>
        </copy>
        <copy file="${install.src.dir}/org/apache/LICENSE.txt" tofile="${dist.dir}/LICENSE_Apache.txt" preservelastmodified="true" />
        <echo>copy installer icon to ${dist.dir}</echo>
        <copy todir="${dist.dir}" preservelastmodified="true">
            <!-- check no /bin directory -->
            <fileset dir="${install.src.dir}" includes="**/*.png" excludes="bin/**" />
        </copy>
        <echo>building installer .jar file</echo>
        <jar destfile="${work.dir}/jython_installer-${jython.version}.jar" basedir="${dist.dir}" update="true">
            <manifest>
                <attribute name="Main-Class" value="org.python.util.install.Installation" />
                <attribute name="Built-By" value="${user.name}" />
                <!-- section for the install program -->
                <section name="Jython">
                    <attribute name="version" value="${jython.version}" />
                    <attribute name="exclude-dirs" value="org;META-INF" />
                </section>
                <!-- info section. ATTN: no blanks, no '.' in the names -->
                <section name="Build-Info">
                    <attribute name="svn-build" value="${do.checkout}" />
                    <attribute name="threadlocal" value="${threadlocal.present}" />
                    <attribute name="secureclassloader" value="${secureclassloader.present}" />
                    <attribute name="servlet" value="${servlet.present}" />
                    <attribute name="readline" value="${readline.present}" />
                    <attribute name="jline" value="${jline.present}" />
                    <attribute name="oracle" value="${oracle.present}" />
                    <attribute name="informix" value="${informix.present}" />
                    <attribute name="mysql" value="${mysql.present}" />
                    <attribute name="postgresql" value="${postgresql.present}" />
                    <attribute name="jndi" value="${jndi.present}" />
                    <attribute name="jdbc" value="${javax.sql.present}" />
                    <attribute name="jdbc3_0" value="${jdbc30.present}" />
                    <attribute name="build-compiler" value="${build.compiler}" />
                    <attribute name="jdk-target-version" value="${jdk.target.version}" />
                    <attribute name="debug" value="${debug}" />
                    <attribute name="optimize" value="${optimize}" />
                </section>
            </manifest>
        </jar>
    </target>

    <!-- run regression test suite -->
    <target name="regrtest" depends="developer-init, post-init">
        <java classname="org.python.util.jython" fork="true">
            <jvmarg value="-Dpython.home=${dist.dir}"/>
            <arg value="${dist.dir}/Lib/test/regrtest.py"/>
            <classpath>
                <pathelement location="${dist.dir}/jython.jar"/>
            </classpath>
        </java>
    </target>

    <!-- run bugtests, create a config if necessary -->
    <target name="bugtest" depends="developer-init, post-init, create-bugtest-config">
         <java classname="org.python.util.jython" fork="true" dir="${bugtests.dir}">
            <classpath>
                <pathelement location="${dist.dir}/jython.jar"/>
            </classpath>
            <jvmarg value="-Dpython.home=${dist.dir}"/>
            <arg value="driver.py"/>
         	<!-- uncomment if you want to run only one test: -->
         	<!--
         	<arg value="386"/>
         	-->
        </java>
    </target>

    <!-- create support_config.py in the bugtset directory only if it doesn't already exist -->
    <target name="create-bugtest-config" depends="developer-init, post-init, check-bugtest-config" unless="have_bugtest_config">
         <!-- doesn't seem to be a direct way to get at the path to javac,
         java.home points to the jre folder. The following assumes a standard
         jdk layout. Alternative is to try something like:

            <property environment="env"/>
            <property name="jdk.home" value="${env.JAVA_HOME}" />
  
         or set jdk.home explicitly
         -->
         <echo>creating ${bugtests.dir}/support_config.py</echo>
         <property name="jdk.home" value="${java.home}/.." />
        <echo file="${bugtests.dir}/support_config.py">
# this configuration was auto-generated by ant build script,
# safe to edit by hand (won't be overwritten)
java_home="${jdk.home}"
jython_home="${dist.dir}" 
classpath="${dist.dir}/jython.jar${path.separator}classes"
        </echo>
    </target>

    <!-- set property have_bugtest_config if support_config.py already exists in the bugtest directory -->
    <target name="check-bugtest-config">
        <available property="have_bugtest_config" file="${bugtests.dir}/support_config.py"/>
    </target>

</project>
