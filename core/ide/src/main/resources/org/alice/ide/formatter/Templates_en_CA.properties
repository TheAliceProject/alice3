AbstractConstructor = 
AbstractDeclaration = 
AbstractValueLiteral = 
Argument = 
ArrayAccess = 
ArrayInstanceCreation = |new| </arrayType/> { </expressions/> }
ArrayLength = </array/>.|length|
AssignmentExpression = 
BlockStatement = 
BooleanExpressionBodyPair = |if| </expression/> |is true then|\n\t</body/>
Comment = 
ConditionalStatement = </booleanExpressionBodyPairs/>\n|else|\n\t</elseBody/>
ConstructorBlockStatement = 
CountLoop = |count up to </count/>\n\t</body/>\n\t loop|
DoInOrder = |do in order\n\t</body/>|
DoTogether = |do together|\n\t</body/>
EachInArrayTogether = |each </__item__/> in </array/> together\n\t</body/>|
ExpressionStatement = 
FieldAccess = 
ForEachInArrayLoop = |for each </__item__/> in </array/>\n\t</body/>\n\t loop|
InfixExpression = 
InstanceCreation = |new </constructor/> </requiredArguments/></variableArguments/></keyedArguments/>|
LambdaExpression = 
LocalAccess = 
LocalDeclarationStatement = 
LogicalComplement = |NOT </operand/>|
MethodInvocation = </expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
NullLiteral = |unset|
ParameterAccess = 
ResourceExpression = 
ReturnStatement = |return| </expression/>
StringConcatenation = </leftOperand/> + </rightOperand/>
StringLiteral = 
SuperConstructorInvocationStatement = |super| </requiredArguments/></variableArguments/></keyedArguments/>
SuperExpression = |super|
ThisConstructorInvocationStatement = |this| </requiredArguments/></variableArguments/></keyedArguments/>
ThisExpression = |this|
UserLambda = |do in order|\n\t</body/>
UserLocal = 
WhileLoop = |while </conditional/> is true\n\t</body/>\n\t loop|
