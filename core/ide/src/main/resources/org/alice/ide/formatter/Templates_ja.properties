AbstractConstructor = </getDeclaringType()/>
AbstractDeclaration = </getName()/>
AbstractValueLiteral = </value/>
Argument = </getParameterNameText()/></expression/>
ArrayAccess = </array/>[ </index/> ]
ArrayInstanceCreation = new </arrayType/> { </expressions/> }
AssignmentExpression = </leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
BlockStatement = </statements/>
BooleanExpressionBodyPair = if </expression/> is true then\n\t</body/>
Comment = // </text/>
ConditionalStatement = </booleanExpressionBodyPairs/>\nelse\n\t</elseBody/>
ConstructorBlockStatement = </constructorInvocationStatement/>\n</statements/>
CountLoop = count up to </count/>\n\t</body/>\n\t loop
DoInOrder = do in order\n\t</body/>
DoTogether = do together\n\t</body/>
EachInArrayTogether = each </__item__/> in </array/> together\n\t</body/>
ExpressionStatement = </expression/>
FieldAccess = </expression/> </field/>
ForEachInArrayLoop = for each </__item__/> in </array/>\n\t</body/>\n\t loop
InfixExpression = </leftOperand/> </operator/> </rightOperand/>
LambdaExpression = </value/>
LocalAccess = </local/>
LocalDeclarationStatement = </__local__/> </_gets_toward_leading_/> </initializer/>
MethodInvocation = </expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
NullLiteral = \u672a\u5b9a\u7fa9
ParameterAccess = </parameter/>
ResourceExpression = </resource/>
ReturnStatement = return </expression/>
StringConcatenation = </leftOperand/> + </rightOperand/>
StringLiteral = "</value/>"
SuperConstructorInvocationStatement = super </requiredArguments/> </variableArguments/> </keyedArguments/>
SuperExpression = super
ThisConstructorInvocationStatement = this </requiredArguments/> </variableArguments/> </keyedArguments/>
ThisExpression = this
UserLambda = do in order\n\t</body/>
UserLocal = </getValidName()/>
WhileLoop = while </conditional/> is true\n\t</body/>\n\t loop
