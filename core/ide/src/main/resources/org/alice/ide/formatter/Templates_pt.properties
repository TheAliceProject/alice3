AbstractValueLiteral = </value/>
Argument = </getParameterNameText()/> </expression/>
ArrayAccess = </array/> [ </index/> ]
ArrayInstanceCreation = novo </arrayType/> { </expressions/> }
ArrayLength = </array/>.comprimento
AssignmentExpression = </leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
BooleanExpressionBodyPair = if </expression/> \u00e9 verdade entao\n\t</body/>
Comment = // </text/>
ConditionalStatement = </booleanExpressionBodyPairs/>\nsenao\n\t</elseBody/>
CountLoop = contar at\u00e9 </count/>\n\t</body/>\n\t repetir
DoInOrder = fazer em  ordem\n\t</body/>
DoTogether = fazer junto\n\t</body/>
FieldAccess = </expression/> </field/>
InfixExpression = </leftOperand/> </operator/> </rightOperand/>
LambdaExpression = </value/>
LocalAccess = </local/>
MethodInvocation = </expression/> </method/> </requiredArguments/> </variableArguments/> </keyedArguments/>
NullLiteral = naoDeterminado
ParameterAccess = </parameter/>
ResourceExpression = </resource/>
ReturnStatement = devolver </expression/>
StringConcatenation = </leftOperand/> + </rightOperand/>
SuperConstructorInvocationStatement =  </requiredArguments/> </variableArguments/> </keyedArguments/>
ThisConstructorInvocationStatement = este </requiredArguments/> </variableArguments/> </keyedArguments/>
ThisExpression = este
UserLambda = fazer em  ordem\n\t</body/>
WhileLoop = enquanto </conditional/> for verdade\n\t</body/>\n\t repetir
