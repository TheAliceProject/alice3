AbstractConstructor = </getDeclaringType()/>
AbstractDeclaration = </getName()/>
AbstractValueLiteral = </value/>
Argument = </getParameterNameText()/></expression/>
ArrayAccess = </array/>[ </index/> ]
ArrayInstanceCreation = \u043d\u043e\u0432\u044b\u0439\u041e\u0431\u044a\u0435\u043a\u0442 </arrayType/> { </expressions/> }
ArrayLength = </array/>.\u0434\u043b\u0438\u043d\u0430
AssignmentExpression = </leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
BlockStatement = </statements/>
BooleanExpressionBodyPair = \u0435\u0441\u043b\u0438 </expression/> \u0438\u0441\u0442\u0438\u043d\u043d\u043e, \u0442\u043e\n\t</body/>
Comment = // </text/>
ConditionalStatement = </booleanExpressionBodyPairs/>\n\u0438\u043d\u0430\u0447\u0435\n\t</elseBody/>
ConstructorBlockStatement = </constructorInvocationStatement/>\n</statements/>
CountLoop = \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c </count/> \u0440\u0430\u0437(\u0430)\n\t</body/>\n\t \u0446\u0438\u043a\u043b
DoInOrder = \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\n\t</body/>
DoTogether = \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\n\t</body/>
EachInArrayTogether = \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 </__item__/> \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 </array/> \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\n\t</body/>
ExpressionStatement = </expression/>
FieldAccess = </expression/> </field/>
ForEachInArrayLoop = \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 </__item__/> \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 </array/>\n\t</body/>\n\t \u0446\u0438\u043a\u043b
InfixExpression = </leftOperand/> </operator/> </rightOperand/>
InstanceCreation = \u043d\u043e\u0432\u044b\u0439\u041e\u0431\u044a\u0435\u043a\u0442 </constructor/> </requiredArguments/></variableArguments/></keyedArguments/>
LambdaExpression = </value/>
LocalAccess = </local/>
LocalDeclarationStatement = </__local__/> </_gets_toward_leading_/> </initializer/>
LogicalComplement = \u041d\u0415 </operand/>
MethodInvocation = </expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
NullLiteral = \u043d\u0435 \u0437\u0430\u0434\u0430\u043d\u043e
ParameterAccess = </parameter/>
ResourceExpression = </resource/>
ReturnStatement = \u0432\u0435\u0440\u043d\u0443\u0442\u044c </expression/>
StringConcatenation = </leftOperand/> + </rightOperand/>
StringLiteral = "</value/>"
SuperConstructorInvocationStatement = super </requiredArguments/> </variableArguments/> </keyedArguments/>
SuperExpression = super
ThisConstructorInvocationStatement = this </requiredArguments/></variableArguments/></keyedArguments/>
ThisExpression = this
UserLambda = \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\n\t</body/>
UserLocal = </getValidName()/>
WhileLoop = \u043f\u043e\u043a\u0430 </conditional/> \u0438\u0441\u0442\u0438\u043d\u043d\u043e\n\t</body/>\n\t \u0446\u0438\u043a\u043b
