AbstractConstructor = </getDeclaringType()/>
AbstractDeclaration = </getName()/>
AbstractValueLiteral = </value/>
Argument = </getParameterNameText()/></expression/>
ArrayAccess = </array/>[ </index/> ]
ArrayInstanceCreation = \u043d\u043e\u0432 </arrayType/> { </expressions/> }
ArrayLength = </array/>.\u0434\u044a\u043b\u0436\u0438\u043d\u0430
AssignmentExpression = </leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
BlockStatement = </statements/>
BooleanExpressionBodyPair = \u0430\u043a\u043e </expression/>\u0435 \u0432\u044f\u0440\u043d\u043e, \u0442\u043e\u0433\u0430\u0432\u0430\n\t</body/>
Comment = // </text/>
ConditionalStatement = </booleanExpressionBodyPairs/>\n\u0438\u043d\u0430\u0447\u0435\n\t</elseBody/>
ConstructorBlockStatement = </constructorInvocationStatement/>\n</statements/>
CountLoop = \u0431\u0440\u043e\u0439 \u0434\u043e </count/>\n\t</body/>\n\t \u043f\u043e\u0432\u0442\u043e\u0440\u0438
DoInOrder = \u0438\u0437\u043f\u044a\u043b\u043d\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u043d\u043e\n\t</body/>
DoTogether = \u0438\u0437\u043f\u044a\u043b\u043d\u0438 \u0437\u0430\u0435\u0434\u043d\u043e\n\t</body/>
EachInArrayTogether = \u0441 \u0432\u0441\u0435\u043a\u0438 </__item__/> \u043e\u0442 </array/> \u0437\u0430\u0435\u0434\u043d\u043e\n\t</body/>
ExpressionStatement = </expression/>
FieldAccess = </expression/> </field/>
ForEachInArrayLoop = \u0437\u0430 \u0432\u0441\u0435\u043a\u0438 </__item__/> \u0432 </array/>\n\t</body/>\n\t \u043f\u043e\u0432\u0442\u043e\u0440\u0438
InfixExpression = </leftOperand/> </operator/> </rightOperand/>
InstanceCreation = \u043d\u043e\u0432 </constructor/> </requiredArguments/></variableArguments/></keyedArguments/>
LambdaExpression = </value/>
LocalAccess = </local/>
LocalDeclarationStatement = </__local__/> </_gets_toward_leading_/> </initializer/>
LogicalComplement = \u041d\u0415 \u0415 </operand/>
MethodInvocation = </expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
NullLiteral = \u043f\u0440\u0435\u043c\u0430\u0445\u043d\u0438
ParameterAccess = </parameter/>
ResourceExpression = </resource/>
ReturnStatement = \u0432\u044a\u0440\u043d\u0438 </expression/>
StringConcatenation = </leftOperand/> + </rightOperand/>
StringLiteral = "</value/>"
SuperConstructorInvocationStatement = \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0441\u043a\u0438</requiredArguments/></variableArguments/></keyedArguments/>
SuperExpression = \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0441\u043a\u0438
ThisConstructorInvocationStatement = \u0442\u043e\u0437\u0438 </requiredArguments/></variableArguments/></keyedArguments/>
ThisExpression = \u0442\u043e\u0437\u0438
UserLambda = do in order\n\t</body/>
UserLocal = </getValidName()/>
WhileLoop = \u0434\u043e\u043a\u0430\u0442\u043e </conditional/> \u0435 \u0438\u0437\u043f\u044a\u043b\u043d\u0435\u043d\u043e\n\t</body/>\n\t \u043f\u043e\u0432\u0442\u0430\u0440\u044f\u0439
